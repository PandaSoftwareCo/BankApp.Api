// <auto-generated />
using System;
using BankApp.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankApp.Data.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20221214040352_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BankApp.Domain.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("AbaRoutingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BankNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountName");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            AccountName = "Personal",
                            AccountType = 1
                        },
                        new
                        {
                            AccountId = 2,
                            AccountName = "Visa",
                            AccountType = 2
                        },
                        new
                        {
                            AccountId = 3,
                            AccountName = "MasterCard",
                            AccountType = 2
                        },
                        new
                        {
                            AccountId = 4,
                            AccountName = "Corporate",
                            AccountType = 1
                        },
                        new
                        {
                            AccountId = 5,
                            AccountName = "Corporate MasterCard",
                            AccountType = 2
                        });
                });

            modelBuilder.Entity("BankApp.Domain.Entities.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("BalanceId");

                    b.HasIndex("AccountId");

                    b.ToTable("Balances", (string)null);
                });

            modelBuilder.Entity("BankApp.Domain.Entities.BankTransaction", b =>
                {
                    b.Property<int>("BankTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankTransactionId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("BankTransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Description");

                    b.HasIndex("Location");

                    b.ToTable("BankTransactions", (string)null);

                    b.HasData(
                        new
                        {
                            BankTransactionId = 1,
                            AccountId = 1,
                            Amount = 3000.00m,
                            CategoryId = 14,
                            Date = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rent",
                            Location = "Building",
                            TransactionType = 1
                        },
                        new
                        {
                            BankTransactionId = 2,
                            AccountId = 3,
                            Amount = 500.00m,
                            CategoryId = 9,
                            Date = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Filling",
                            Location = "Dentist",
                            TransactionType = 1
                        },
                        new
                        {
                            BankTransactionId = 3,
                            AccountId = 1,
                            Amount = 100.00m,
                            CategoryId = 13,
                            Date = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Phone",
                            Location = "Fido",
                            TransactionType = 1
                        },
                        new
                        {
                            BankTransactionId = 4,
                            AccountId = 1,
                            Amount = 100.00m,
                            CategoryId = 8,
                            Date = new DateTime(2023, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Internet",
                            Location = "Telus",
                            TransactionType = 1
                        },
                        new
                        {
                            BankTransactionId = 5,
                            AccountId = 1,
                            Amount = 100.00m,
                            CategoryId = 5,
                            Date = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Heat",
                            Location = "BCHydro",
                            TransactionType = 1
                        });
                });

            modelBuilder.Entity("BankApp.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Car Insurance"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Car Lease"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Car Repair"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Computer"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Electricity"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Gas"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Home Insurance"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Internet"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Medical"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Office Furniture"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Office Supplies"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Parking"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Phone"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Rent"
                        },
                        new
                        {
                            CategoryId = 15,
                            Name = "Salary"
                        },
                        new
                        {
                            CategoryId = 16,
                            Name = "Dividend"
                        },
                        new
                        {
                            CategoryId = 17,
                            Name = "Tuition"
                        });
                });

            modelBuilder.Entity("BankApp.Domain.Entities.Balance", b =>
                {
                    b.HasOne("BankApp.Domain.Entities.Account", "Account")
                        .WithMany("Balances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankApp.Domain.Entities.BankTransaction", b =>
                {
                    b.HasOne("BankApp.Domain.Entities.Account", "Account")
                        .WithMany("BankTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BankApp.Domain.Entities.Category", "Category")
                        .WithMany("BankTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BankApp.Domain.Entities.Account", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("BankTransactions");
                });

            modelBuilder.Entity("BankApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("BankTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
